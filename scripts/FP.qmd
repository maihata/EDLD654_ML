---
title: "EDLD654 Final Project"
author: "Maiko Hata"
format:
  revealjs:
    theme: serif
    footer: "EDLD654 Final Project - Maiko Hata"
editor: visual
---

```{r}
# "Beautiful presentations with R and Quarto" https://youtu.be/01KifhHDkFk?si=2axQMI_c0Tu9_Z5P 
# quarto themes  https://quarto.org/docs/presentations/revealjs/themes.html
# theme - serif or simple
```

```{r}
library(dplyr)
library(finalfit)
library(lubridate)
library(reticulate)
library(finalfit)
library(stringr)
library(recipes)
library(ggplot2)
library(tidyverse)
library(gt)
```

## Research problem

The big question: How can I design and apply ML models without reinforcing existing biases?

![](images/Asian_student_turned_white.png){fig-align="center"}

## Research question

-   **Goal**: Predict Autism Spectrum Quotient (AQ-10) screener scores from demographic information.

-   **Potential benefit**: Understanding factors relating to scores can potentially support more focused outreach.

-   **Ethical & equity considerations**: As an Autistic researcher and Early Intervention (EI) specialist, I want to understand how predictive models are created, their limitations, and ethical considerations.

```{r}
# Machine learning is a topic that holds many layers and emotions. There are clear benefits, such as identifying patterns in large datasets that improve efficiency and flow across fields. However, the use of big data without consent from the individuals it represents raises serious ethical concerns, including the misuse of sensitive information and the reinforcement of existing biases. For example, an Asian MIT student recently received a “White” version of her image when she requested a professional headshot generated by AI (Bhaimiya, 2023). As she later reflected, “this has catalyzed a larger conversation around AI bias and who is or isn’t included in this new wave of technology” (Wang, as cited in Growcoot, 2023).
```

## Data

-   From Kaggle

    -   **Numerical** (age, screener result)
    -   **Binary** (gender f/m, jaundice yes/no, family history of Autism yes/no, used app before yes/no, results from screener results YES (7+) NO (\~6)
    -   **Text** (ethnicity, country of residence)

::: center
![](images/Autism_Spectrum_dataset.png){fig-align="center" width="60%"}
:::

```{r}
#I looked for dataset on Kaggle as recommended by Lina. There were a few Autism related datasets, and I chose this one based on the columns and the score for “ease of use”. I really had ethical dilemma, though, reducing complex lives of people down to just these columns. As an Autism consultant who spends 20+ hours to evaluate infants and toddlers for educational Autism eligibility, I really didn’t want to use the binary outcome of YES Autism or NO Autism based on an online screener of 10 questions, especially because it seemed like if you had a score of 7+, you were “yes Autism” group. So, I decided to use the total score of 0-10 as the numerical, continuous outcomes that i will try to predict. 
```

## Cleaning up missing data 

```{r}
autism <- read.csv('/Users/maiko/Desktop/EDLD654_ML/data/Autism_Screening.csv', header=TRUE)
```

```{r}
setwd("~/Desktop/EDLD654_ML")
```

```{r}
autism$gender_binary <- ifelse(autism$gender == "m", 1, 0)
autism$jundice_binary <- ifelse(autism$jundice == "yes", 1, 0)
autism$Class.ASD_binary <- ifelse(autism$Class.ASD == "YES", 1, 0)
```

```{r}
#| echo: true 
#| fig-align: center
#| # #| output-location: makes the plot go next page, or column etc. 

ff_glimpse(autism[, 1:20])
```

## Cleaning up missing data

Because the dataset had "?" for missing data, I calculated the percentage of "?" values in the Ethnicity column.

```{r}
#| echo: true 
#| fig-align: center
sum(autism$ethnicity == "?", na.rm = TRUE)
nrow(autism)
mean(autism$ethnicity == "?", na.rm = TRUE) * 100
```

## Descriptive statistics 

Autism Screener result

```{r}
autism <- autism %>%
  mutate(
    contry_of_res = str_trim(contry_of_res),
    contry_of_res = str_replace_all(contry_of_res, "^[\"']+|[\"']+$", ""),
    contry_of_res = str_squish(contry_of_res),
    contry_of_res = recode(contry_of_res,
      "USA" = "United States", "U.S." = "United States",
      "United States of America" = "United States"
    )
  )
```

```{r}
autism %>% count(contry_of_res, sort = TRUE)
```

```{r}
autism <- autism %>%
  mutate(
    ethnicity = str_trim(ethnicity),
    ethnicity = str_replace_all(ethnicity, "^[\"']+|[\"']+$", ""),
    ethnicity = str_squish(ethnicity)
    )
```

```{r}
autism$age <- as.numeric(autism$age)
sum(is.na(autism$age))
is.numeric(autism$result)
```

```{r}
#| echo: true 
#| fig-align: center
ggplot(autism, aes(x = Class.ASD, fill = Class.ASD)) +
  geom_bar() +
  scale_fill_manual(values = c("NO" = "#69b3a2", "YES" = "#404080")) +
  labs(title = "Autism Prevalence by Screener Result",
       x = "Autism Class", y = "Count") +
  theme_minimal() +
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5)
  )
```

## Descriptive statistics 

Autism Screener user age

```{r}
#| echo: true 
#| fig-align: center
ggplot(autism, aes(x = age)) +
  geom_histogram(binwidth = 0.5) +
  scale_x_continuous(limits = c(0, max(autism$age, na.rm = TRUE) + 10)) +
  labs(title = "Age Distribution",
       x = "Age",
       y = "Count") +
  theme_minimal()

```

## Descriptive statistics 

Autism Screener user age with filter(age \<= 100)

```{r}
#| echo: true 
#| fig-align: center
autism <- autism %>% 
  filter(age <= 100)

ggplot(autism, aes(x = age)) +
  geom_histogram(binwidth = 0.5, fill = "steelblue") +
  labs(title = "Age Distribution",
       x = "Age",
       y = "Count") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

```

## Descriptive statistics 

When you click the **Render** button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:

## Descriptive statistics 

When you click the **Render** button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:

## Descriptive statistics 

When you click the **Render** button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:

## Descriptive statistics 

When you click the **Render** button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:
